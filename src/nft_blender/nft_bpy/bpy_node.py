#!$BLENDER_PATH/python/bin python

"""
NFT Blender - BPY - NODE

"""

import re

import bpy

from nft_blender.nft_bpy._bpy_core import bpy_obj, bpy_scn


def node_get_nodes_from_node_tree(
    node_tree: bpy.types.NodeTree,
    node_types: tuple = (bpy.types.Node,),
    sub_grps: bool = True,
) -> list:
    """Works for any tree of nodes, including Materials, Groups, and NodeTrees"""

    nodes = []

    for n in node_tree.nodes:

        if isinstance(n, node_types):
            nodes.append(n)

        if sub_grps and isinstance(n, (
            bpy.types.CompositorNodeGroup,
            bpy.types.GeometryNodeGroup,
            bpy.types.NodeGroup,
            bpy.types.ShaderNodeGroup,
            bpy.types.TextureNodeGroup,
        )):
            nodes.extend(node_get_nodes_from_node_tree(
                n.node_tree,
                node_types,
                sub_grps,
            ))
    
    return nodes


def node_instances_from_geometry_nodes(
    obj: bpy.types.Object,
    apply_location: bool = False,
    apply_rotation: bool = False,
    apply_scale: bool = False,
    digit_padding: int = 3,
    digit_start: int = 0,
    new_data: bool = True
) -> None:
    """Create a new collection of instanced Object(s) generated by a Geomtry Node Modifier."""

    # Check that the object has a Geometry Nodes modifier active.
    nodes_mdfrs = [mdfr for mdfr in obj.modifiers if all((
        isinstance(mdfr, bpy.types.NodesModifier),
        mdfr.is_active,
        mdfr.show_viewport
    ))]
    if not nodes_mdfrs:
        return

    # Create a new Collection with the same name as the Object.
    col = bpy.data.collections.new(obj.name)

    # Make the new Collection a Sub-Collection of the Object's linked Collection(s).
    link_cols = obj.users_collection or bpy.context.scene.collection.children
    for link_col in link_cols:
        link_col.children.link(col)

    # Duplicate the given Object as an instance. Add it to the new Collection.
    dup_obj = bpy_scn.scn_duplicate_object(obj, instance=not new_data)
    bpy_scn.scn_link_objects_to_collection(col, [dup_obj], exclusive=True)

    # Make the instanced Object(s) generated by the Geometry Node Modifier real (temporarily),
    # Clear the redundant Modifiers and make them instances of the original duplicated Object.
    bpy.ops.object.duplicates_make_real(use_base_parent=False, use_hierarchy=False)
    for obj in col.objects:
        obj.modifiers.clear()
        obj.data = dup_obj.data
    
    # Delete the origin duplicated Object.
    bpy.data.objects.remove(dup_obj)

    # Rename the instance Object(s).
    re_pattern = re.compile(r'(?P<prefix>.+)\.(?P<suffix>\d+)$')
    digit_padding_len = max(digit_padding, len(str(len(col.objects))))
    for i, obj in enumerate(col.objects, digit_start):
        re_match = re_pattern.match(obj.name)
        if re_match:
            prefix, suffix = re_match.group('prefix'), f'{i:0{digit_padding_len}d}'
            obj.name = f'{prefix}_{suffix}'
            if new_data and i < 1: 
                obj.data.name = obj.name

    bpy_scn.scn_select_items(col.objects)
    bpy.ops.object.transform_apply(location=False, rotation=False, scale=True)

    # Clear the selection.
    bpy_scn.scn_select_items()
